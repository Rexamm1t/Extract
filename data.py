import random
import json
import time
import os
from datetime import datetime, timedelta
from colorama import Fore, Style, init

ADDINFO = "EXTRACT‚Ñ¢ PLATFORM 2025"
INFO = "Extract Team (Rexamm1t, Wefol1x)"
VERSION = "EXTRACT 9.6.0"
VERSION_ALL = "EXTRACT 9.6.0 (9.7.25) (UNIX base)"
SAVE_PATH = "scripts/users.json"
KEYS_PATH = "scripts/keys.json"
CRYPTO_SYMBOLS = {
    "EXTRACT": "‚í∫",
    "BETASTD": "Œ≤",
    "EXRSD": "ƒí",
    "DOGCOIN": "DC",
    "BTC": "‚Çø",
    "ETH": "Œû",
    "LTC": "≈Å",
    "BNB": "Íûç",
    "ADA": "ùî∏",
    "SOL": "S",
    "XRP": "‚úï",
    "DOT": "‚óè",
    "DOGE": "√ê",
    "SHIB": "SH",
    "AVAX": "AV",
    "TRX": "T",
    "MATIC": "M",
    "ATOM": "A",
    "NOT": "‚ñ≤",
    "TON": "‚ñº",
    "XYZ": "≈∏",
    "ABC": "‚ú¶",
    "DEF": "DT",
    "GHI": "ƒû",
    "JKL": "+",
    "MNO": "·∏æ",
    "PQR": "‚ùñ"
}
CURRENCY = "‚í∫"
INITIAL_BALANCE = 10000.0
LEVEL_BASE_XP = 200
SEASON_EVENTS = {
    12: {"name": "–ó–∏–º–Ω–∏–π –ò–≤–µ–Ω—Ç", "period": (1, 24.2),
         "effects": ["x2 –±–æ–Ω—É—Å–∞–º", "–°–∫–∏–¥–∫–∏ 20%", "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –¥–∂–µ–∫–ø–æ—Ç"]},
    3: {"name": "–í–µ—Å–µ–Ω–Ω–∏–π –ò–≤–µ–Ω—Ç", "period": (1.3, 30.5),
        "effects": ["+150% XP", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ø–∏–Ω—ã", "–¶–≤–µ—Ç–æ—á–Ω—ã–µ –±–æ–Ω—É—Å—ã"]},
    6: {"name": "–õ–µ—Ç–Ω–∏–π –ò–≤–µ–Ω—Ç", "period": (1.6, 31.8),
        "effects": ["–ö—ç—à–±—ç–∫ 15%", "–ü–ª—è–∂–Ω—ã–µ –±–æ–Ω—É—Å—ã", "–°—Ç—Ä–∞—Ö–æ–≤–∫–∞ —Å—Ç–∞–≤–æ–∫"]},
    9: {"name": "–û—Å–µ–Ω–Ω–∏–π –ò–≤–µ–Ω—Ç", "period": (1.9, 1.12),
        "effects": ["–£—Ä–æ–∂–∞–π x2", "–ë–æ–Ω—É—Å—ã –∑–∞ –¥–µ–ø–æ–∑–∏—Ç", "–û—Å–µ–Ω–Ω–∏–µ —Å–∫–∏–¥–∫–∏"]}
}
AUTOSAVE_INTERVAL = 300

init(autoreset=True)

def dynamic_border(text, border_color=Fore.MAGENTA, width=None):
    lines = text.split('\n')
    max_width = width if width else max(len(line) for line in lines) + 4
    border = '‚ïê' * (max_width - 2)
    bordered = [f"{border_color}‚ïî{border}‚ïó"]
    for line in lines:
        bordered.append(f"{border_color}‚ïë {line.ljust(max_width - 4)} ‚ïë")
    bordered.append(f"{border_color}‚ïö{border}‚ïù")
    return '\n'.join(bordered)

def rainbow_text(text):
    colors = [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]
    return ''.join([colors[i % len(colors)] + char for i, char in enumerate(text)])

def gradient_text(text, colors):
    return ''.join([colors[i % len(colors)] + char for i, char in enumerate(text)])

def format_time(seconds):
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = seconds % 60
    return f"{int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"

def print_art():
    art = r"""
                                ,----,                                             ,----, 
                              ,/   .`|                                           ,/   .`| 
    ,---,. ,--,     ,--,    ,`   .'  :,-.----.      ,---,         ,----..      ,`   .'  : 
  ,'  .' | |'. \   / .`|  ;    ;     /\    /  \    '  .' \       /   /   \   ;    ;     / 
,---.'   | ; \ `\ /' / ;.'___,/    ,' ;   :    \  /  ;    '.    |   :     :.'___,/    ,'  
|   |   .' `. \  /  / .'|    :     |  |   | .\ : :  :       \   .   |  ;. /|    :     |   
:   :  |-,  \  \/  / ./ ;    |.';  ;  .   : |: | :  |   /\   \  .   ; /--` ;    |.';  ;   
:   |  ;/|   \  \.'  /  `----'  |  |  |   |  \ : |  :  ' ;.   : ;   | ;    `----'  |  |   
|   :   .'    \  ;  ;       '   :  ;  |   : .  / |  |  ;/  \   \|   : |        '   :  ;   
|   |  |-,   / \  \  \      |   |  '  ;   | |  \ '  :  | \  \ ,'.   | '___     |   |  '   
'   :  ;/|  ;  /\  \  \     '   :  |  |   | ;\  \|  |  '  '--'  '   ; : .'|    '   :  |   
|   |    \./__;  \  ;  \    ;   |.'   :   ' | \.'|  :  :        '   | '/  :    ;   |.'    
|   :   .'|   : / \  \  ;   '---'     :   : :-'  |  | ,'        |   :    /     '---'      
|   | ,'  ;   |/   \  ' |             |   |.'    `--''           \   \ .'                 
`----'    `---'     `--`              `---'                       `---`
    """
    print(gradient_text(art, [Fore.RED, Fore.YELLOW, Fore.GREEN, Fore.CYAN, Fore.BLUE, Fore.MAGENTA]))

class CryptoMarket:
    def __init__(self):
        self.rates = {
            "BETASTD": random.uniform(7750100, 10000000),
            "DOGCOIN": random.uniform(1000000, 2000000),
            "EXRSD": random.uniform(328110, 400000),
            "BTC": random.uniform(25000, 110000),
            "ETH": random.uniform(1500, 6000),
            "LTC": random.uniform(60, 455),
            "BNB": random.uniform(200, 600),
            "ADA": random.uniform(200, 500),
            "SOL": random.uniform(20, 200),
            "XRP": random.uniform(50, 100),
            "DOT": random.uniform(4, 300),
            "DOGE": random.uniform(300, 500),
            "SHIB": random.uniform(1000, 20000),
            "AVAX": random.uniform(10, 100),
            "TRX": random.uniform(100, 200),
            "MATIC": random.uniform(14000, 16000),
            "ATOM": random.uniform(600, 1000),
            "NOT": random.uniform(0.05, 0.5),
            "TON": random.uniform(1.0, 6.5),
            "XYZ": random.uniform(0.01, 0.1),
            "ABC": random.uniform(10, 50),
            "DEF": random.uniform(100, 500),
            "GHI": random.uniform(5, 20),
            "JKL": random.uniform(0.001, 0.01),
            "MNO": random.uniform(0.5, 2),
            "PQR": random.uniform(1000, 5000),
            "EXTRACT": 1.0
        }

    def update_rates(self):
        for coin in self.rates:
            if coin != "EXTRACT":
                change = random.uniform(-0.07, 0.07)
                self.rates[coin] = max(0.01, self.rates[coin] * (1 + change))

    def get_rate(self, coin):
        return self.rates.get(coin, 0.0)

class User:
    def __init__(self, username):
        self.username = username
        self.crypto_balance = {coin: 0.0 for coin in CRYPTO_SYMBOLS}
        self.crypto_balance["EXTRACT"] = INITIAL_BALANCE
        self.games_played = 0
        self.wins = 0
        self.losses = 0
        self.transactions = []
        self.play_time = 0.0
        self.session_start = None
        self.level = 1
        self.xp = 0
        self.total_earned = 0.0

    def to_dict(self):
        return {
            "username": self.username,
            "crypto_balance": self.crypto_balance,
            "games_played": self.games_played,
            "wins": self.wins,
            "losses": self.losses,
            "transactions": self.transactions,
            "play_time": self.play_time,
            "level": self.level,
            "xp": self.xp,
            "total_earned": self.total_earned
        }

    @classmethod
    def from_dict(cls, data):
        user = cls(data["username"])
        user.crypto_balance = {coin: data["crypto_balance"].get(coin, 0.0) for coin in CRYPTO_SYMBOLS}
        user.games_played = data.get("games_played", 0)
        user.wins = data.get("wins", 0)
        user.losses = data.get("losses", 0)
        user.transactions = data.get("transactions", [])
        user.play_time = data.get("play_time", 0.0)
        user.level = data.get("level", 1)
        user.xp = data.get("xp", 0)
        user.total_earned = data.get("total_earned", 0.0)
        return user

    def start_session(self):
        self.session_start = time.time()

    def end_session(self):
        if self.session_start:
            self.play_time += time.time() - self.session_start
            self.session_start = None

    def update_stats(self, won):
        self.games_played += 1
        if won:
            self.wins += 1
        else:
            self.losses += 1

    def add_transaction(self, action, coin, amount, price):
        self.transactions.insert(0, {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "action": action,
            "coin": coin,
            "amount": round(amount, 4),
            "total": round(price, 2)
        })
        self.transactions = self.transactions[:10]

    def win_loss_ratio(self):
        if self.games_played == 0:
            return 0.0
        return round(self.wins / self.games_played * 100, 1)

    def add_xp(self, amount):
        xp_gain = random.randint(100, 300) + self.level * 50
        self.xp += xp_gain
        while self.xp >= self.required_xp():
            self.xp -= self.required_xp()
            self.level_up()

    def required_xp(self):
        return LEVEL_BASE_XP * (1.2 ** (self.level - 1))

    def level_up(self):
        self.level += 1
        reward = self.level * 1000
        self.crypto_balance["EXTRACT"] += reward
        print(dynamic_border(
            f"{Fore.GREEN}üéâ –£—Ä–æ–≤–µ–Ω—å –ü–æ–≤—ã—à–µ–Ω! {self.level-1} => {self.level}\n"
            f"+{reward}{CURRENCY} - –í–∞—à –±–æ–Ω—É—Å –∑–∞ —É—Ä–æ–≤–µ–Ω—å!\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {self.required_xp():.0f} XP",
            Fore.YELLOW
        ))

    def show_level_progress(self):
        progress = self.xp / self.required_xp()
        bar = "‚ñì" * int(progress * 20) + "‚ñë" * (20 - int(progress * 20))
        return f"{Fore.CYAN}–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: {bar} {progress*100:.1f}%"

    def crywall(self):
        content = [f"{Fore.CYAN}‚ïî{'‚ïê'*25}‚ï¶{'‚ïê'*15}‚ïó"]
        for coin, amount in self.crypto_balance.items():
            if amount <= 0: continue
            symbol = CRYPTO_SYMBOLS[coin]
            line = f"‚ïë {symbol} {coin.ljust(10)} ‚ïë {amount:>10.4f} ‚ïë"
            color = Fore.GREEN if coin == "EXTRACT" else Fore.YELLOW
            content.append(color + line)
        content.append(f"{Fore.CYAN}‚ïö{'‚ïê'*25}‚ï©{'‚ïê'*15}‚ïù")
        print('\n'.join(content))

    def show_stats(self):
        content = [
            f"{Fore.CYAN}–ë–∞–ª–∞–Ω—Å:",
            *[f"  {CRYPTO_SYMBOLS[coin]} {coin}: {amount:.4f}" 
              for coin, amount in self.crypto_balance.items() if amount > 0],
            "",
            f"{Fore.YELLOW}–ò–≥—Ä: {self.games_played} | –ü–æ–±–µ–¥: {self.wins} | –ü–æ—Ä–∞–∂–µ–Ω–∏–π: {self.losses}",
            f"{Fore.MAGENTA}WL Ratio: {self.win_loss_ratio()}%",
            f"{Fore.GREEN}–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ: {format_time(self.play_time)}",
            f"{Fore.BLUE}–£—Ä–æ–≤–µ–Ω—å: {self.level} | XP: {self.xp:.0f}/{self.required_xp():.0f}",
            self.show_level_progress(),
            "",
            f"{Fore.CYAN}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
        ]
        
        for t in self.transactions[:5]:
            action_color = Fore.GREEN if t['action'] == 'buy' else Fore.RED
            content.append(
                f"  [{t['timestamp']}] {action_color}{t['action'].upper()} {t['amount']} {t['coin']} "
                f"{Fore.WHITE}–∑–∞ {t['total']}{CURRENCY}"
            )

        stats = '\n'.join(content)
        print(dynamic_border(f"{Fore.GREEN}–ü—Ä–æ—Ñ–∏–ª—å {self.username}\n{stats}", Fore.GREEN))

class Casino:
    def __init__(self):
        self.users = {}
        self.current_user = None
        self.market = CryptoMarket()
        self.last_command = ""
        self.last_save = time.time()
        self.promo_codes = self._load_promocodes()
        self.load_users()

    def save_users(self):
        try:
            with open(SAVE_PATH, "w") as f:
                data = {un: user.to_dict() for un, user in self.users.items()}
                json.dump(data, f, indent=4)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

    def load_users(self):
        try:
            with open(SAVE_PATH, "r") as f:
                data = json.load(f)
                self.users = {un: User.from_dict(user_data) for un, user_data in data.items()}
        except (FileNotFoundError, json.JSONDecodeError):
            self.users = {}
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def _load_promocodes(self):
        try:
            with open(KEYS_PATH, "r") as f:
                data = json.load(f)
                valid_codes = {}
                for code, details in data.items():
                    if isinstance(details, dict) and all(key in details for key in ['type', 'amount', 'used']):
                        if details['type'] == 'crypto' and 'coin' not in details:
                            continue
                        valid_codes[code.lower()] = details
                return valid_codes
        except FileNotFoundError:
            print(f"{Fore.YELLOW}–§–∞–π–ª –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {KEYS_PATH}")
            return {}
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")
            return {}

    def _save_promocodes(self):
        try:
            with open(KEYS_PATH, "w") as f:
                json.dump(self.promo_codes, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {str(e)}")

    def activate_promo(self, code):
        if not self.current_user:
            print(dynamic_border(f"{Fore.RED}–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!", Fore.RED))
            return

        code = code.lower()
        promo = self.promo_codes.get(code)

        if not promo:
            print(dynamic_border(f"{Fore.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!", Fore.RED))
            return
            
        if promo["used"]:
            print(dynamic_border(f"{Fore.RED}–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!", Fore.RED))
            return

        if promo["type"] == "xp":
            self.current_user.add_xp(promo["amount"])
            msg = f"+{promo['amount']} XP"
        elif promo["type"] == "currency":
            self._update_balance(promo["amount"])
            msg = f"+{promo['amount']}{CURRENCY}"
        elif promo["type"] == "crypto":
            coin = promo["coin"]
            amount = promo["amount"]
            self.current_user.crypto_balance[coin] += amount
            msg = f"+{amount} {coin} {CRYPTO_SYMBOLS[coin]}"
        else:
            print(dynamic_border(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞!", Fore.RED))
            return

        self.promo_codes[code]["used"] = True
        self._save_promocodes()
        
        print(dynamic_border(
            f"{Fore.GREEN}–£—Å–ø–µ—à–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è!\n"
            f"{Fore.CYAN}–ù–∞–≥—Ä–∞–¥–∞: {msg}",
            Fore.GREEN
        ))

    def check_season_event(self):
        now = datetime.now()
        current_month = now.month
        day = now.day
        
        for month, event in SEASON_EVENTS.items():
            start_month, end_day = event["period"]
            if current_month == month and day <= end_day:
                self._print_season_info(event)
                return

    def _print_season_info(self, event):
        content = [
            f"{Fore.MAGENTA}{event['name']}",
            f"{Fore.CYAN}–ê–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:"
        ]
        for i, effect in enumerate(event["effects"], 1):
            content.append(f"{i}. {effect}")
        print(dynamic_border('\n'.join(content), Fore.MAGENTA))

    def apply_event_effects(self, amount):
        now = datetime.now()
        for event in SEASON_EVENTS.values():
            start_month, end_day = event["period"]
            if start_month <= now.month <= (start_month + 2):
                if "x2" in event['effects'][0]:
                    amount *= 2
                elif "XP" in event['effects'][0]:
                    self.current_user.add_xp(amount * 0.5)
                elif "–ö—ç—à–±—ç–∫" in event['effects'][0]:
                    self._update_balance(amount * 0.15)
        return amount

    def _check_balance(self, amount, currency="EXTRACT"):
        return self.current_user.crypto_balance.get(currency, 0) >= amount

    def _update_balance(self, amount, currency="EXTRACT"):
        self.current_user.crypto_balance[currency] += amount

    def _validate_bet(self, bet):
        if not self.current_user:
            print(f"{Fore.RED}–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return False
        if bet <= 0:
            print(f"{Fore.RED}–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return False
        if not self._check_balance(bet):
            print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return False
        return True

    def _process_result(self, win, bet):
        win = self.apply_event_effects(win)
        if win > 0:
            self._update_balance(win)
            self.current_user.update_stats(True)
            self.current_user.add_xp(win)
        else:
            self.current_user.update_stats(False)
            self.current_user.add_xp(bet * 0.1)
        self.current_user.total_earned += win
        self.save_users()

    def create_user(self, username):
        if username in self.users:
            print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        self.users[username] = User(username)
        self.current_user = self.users[username]
        self.save_users()
        print(f"{gradient_text(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω!', [Fore.GREEN, Fore.LIGHTGREEN_EX])}")

    def select_user(self, username):
        if username in self.users:
            if self.current_user:
                self.current_user.end_session()
            self.current_user = self.users[username]
            self.current_user.start_session()
            print(f"{Fore.GREEN}–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {rainbow_text(username)}")
        else:
            print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def delete_user(self, username):
        if username in self.users:
            if self.current_user and self.current_user.username == username:
                self.current_user.end_session()
                self.current_user = None
            del self.users[username]
            self.save_users()
            print(f"{Fore.GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª—ë–Ω!")
        else:
            print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def show_all_profiles(self):
        if not self.users:
            print(dynamic_border(f"{Fore.RED}–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", Fore.RED))
            return
            
        profiles = [f"{i+1}. {un}" for i, un in enumerate(self.users.keys())]
        content = [f"{Fore.CYAN}–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:"] + profiles
        print(dynamic_border('\n'.join(content), Fore.BLUE))

    def slots(self, bet):
        if not self._validate_bet(bet):
            return

        print(dynamic_border(f"{Fore.CYAN}üé∞ –ò–ì–†–ê–ï–ú –í –ê–í–¢–û–ú–ê–¢–´!", Fore.CYAN))
        self._update_balance(-bet)

        symbols = ["üçí", "üçä", "üçã", "üíé", "7Ô∏è‚É£", "üîî"]
        results = [random.choice(symbols) for _ in range(3)]
        line = " | ".join(results)
        print(f"\n{line}\n")

        if results[0] == results[1] == results[2]:
            win = bet * 10
            print(dynamic_border(f"{Fore.GREEN}–î–ñ–ï–ö–ü–û–¢! +{win}{CURRENCY}", Fore.GREEN))
        elif results[0] == results[1] or results[1] == results[2]:
            win = bet * 2
            print(dynamic_border(f"{Fore.YELLOW}–í—ã–∏–≥—Ä—ã—à! +{win}{CURRENCY}", Fore.YELLOW))
        else:
            win = 0
            print(dynamic_border(f"{Fore.RED}–ü—Ä–æ–∏–≥—Ä—ã—à", Fore.RED))

        self._process_result(win, bet)

    def trade(self, command):
        if not self.current_user:
            print(f"{Fore.RED}–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! add/login [–Ω–∏–∫]")
            return

        try:
            parts = command.split()
            if len(parts) < 3:
                raise ValueError
            action = parts[0].lower()
            coin = parts[1].upper()
            amount = float(parts[2])

            if amount <= 0:
                print(f"{Fore.RED}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
                return

            if coin not in self.market.rates:
                print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {coin}")
                return

            if action == "buy":
                cost = amount * self.market.get_rate(coin) * 1.01
                if not self._check_balance(cost):
                    print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
                    return
                self._update_balance(-cost)
                self.current_user.crypto_balance[coin] += amount
                self.current_user.add_transaction('buy', coin, amount, cost)
                print(dynamic_border(f"{Fore.GREEN}–ö—É–ø–ª–µ–Ω–æ {amount:.4f} {coin}", Fore.CYAN, 40))

            elif action == "sell":
                if self.current_user.crypto_balance.get(coin, 0) < amount:
                    print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {coin} –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!")
                    return
                value = amount * self.market.get_rate(coin) * 0.99
                self.current_user.crypto_balance[coin] -= amount
                self._update_balance(value)
                self.current_user.add_transaction('sell', coin, amount, value)
                print(dynamic_border(f"{Fore.GREEN}–ü—Ä–æ–¥–∞–Ω–æ {amount:.4f} {coin}", Fore.MAGENTA, 40))

            else:
                print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                return

            self.market.update_rates()
            self.save_users()

        except (IndexError, ValueError):
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: trade [buy/sell] [–º–æ–Ω–µ—Ç–∞] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]")

    def monster_battle(self, bet):
        if not self._validate_bet(bet):
            return

        print(dynamic_border(f"{Fore.RED}üêâ –í–°–¢–£–ü–ê–ï–ú –í –ë–û–ô!", Fore.RED))
        self._update_balance(-bet)

        player_attack = random.randint(50, 150) + self.current_user.level * 2
        monster_attack = random.randint(50, 150)

        print(f"{Fore.CYAN}–í–∞—à–∞ —Å–∏–ª–∞ –∞—Ç–∞–∫–∏: {player_attack}")
        print(f"{Fore.RED}–°–∏–ª–∞ –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞: {monster_attack}")

        if player_attack > monster_attack:
            win = bet * 3
            print(dynamic_border(f"{Fore.GREEN}–ü–û–ë–ï–î–ê! +{win}{CURRENCY}", Fore.GREEN))
        else:
            win = 0
            print(dynamic_border(f"{Fore.RED}–ü–û–†–ê–ñ–ï–ù–ò–ï", Fore.RED))

        self._process_result(win, bet)

    def dice(self, bet):
        if not self._validate_bet(bet):
            return

        print(dynamic_border(f"{Fore.YELLOW}üé≤ –ë–†–û–°–ê–ï–ú –ö–û–°–¢–ò", Fore.YELLOW))
        self._update_balance(-bet)

        player_dice = sum(random.randint(1, 6) for _ in range(3))
        dealer_dice = sum(random.randint(1, 6) for _ in range(3))

        print(f"{Fore.CYAN}–í–∞—à–∏ –∫–æ—Å—Ç–∏: {player_dice}")
        print(f"{Fore.RED}–ö–æ—Å—Ç–∏ –¥–∏–ª–µ—Ä–∞: {dealer_dice}")

        if player_dice > dealer_dice:
            win = bet * 2
            print(dynamic_border(f"{Fore.GREEN}–í–´–ò–ì–†–´–®! +{win}{CURRENCY}", Fore.GREEN))
        else:
            win = 0
            print(dynamic_border(f"{Fore.RED}–ü–†–û–ò–ì–†–´–®", Fore.RED))

        self._process_result(win, bet)

    def high_low(self, bet):
        if not self._validate_bet(bet):
            return

        print(dynamic_border(f"{Fore.MAGENTA}üé¥ –ò–ì–†–ê HIGH-LOW", Fore.MAGENTA))
        self._update_balance(-bet)

        current = random.randint(1, 200)
        print(f"–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ: {Fore.CYAN}{current}")

        choice = input(f"{Fore.YELLOW}–°–ª–µ–¥—É—é—â–µ–µ –±—É–¥–µ—Ç –≤—ã—à–µ (h) –∏–ª–∏ –Ω–∏–∂–µ (l)? ").lower()

        next_num = random.randint(1, 200)
        print(f"–ù–æ–≤–æ–µ —á–∏—Å–ª–æ: {Fore.CYAN}{next_num}")

        if (choice == 'h' and next_num > current) or (choice == 'l' and next_num < current):
            win = bet * 2
            print(dynamic_border(f"{Fore.GREEN}–ü–û–ë–ï–î–ê! +{win}{CURRENCY}", Fore.GREEN))
        else:
            win = 0
            print(dynamic_border(f"{Fore.RED}–ü–†–û–ò–ì–†–´–®", Fore.RED))

        self._process_result(win, bet)

    def show_rates(self):
        content = [f"{Fore.CYAN}–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã:"]
        for coin, rate in self.market.rates.items():
            if coin == "EXTRACT":
                continue
            content.append(
                f"{CRYPTO_SYMBOLS[coin]} 1 {coin} = {rate:.2f}{CURRENCY}"
            )
        print(dynamic_border('\n'.join(content), Fore.BLUE))

    def newnote_up(self):
        path_text = f"""
{Fore.CYAN}EXTRACT 9.6.0 (9.7.25)\n
{Fore.WHITE}1. 13 –ù–æ–≤—ã—Ö –∫—Ä–∏–ø—Ç–æ —Ç–æ–∫–µ–Ω–æ–≤
{Fore.WHITE}2. –ü–∞—Ç—á–Ω–æ—É—Ç
{Fore.WHITE}3. –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–µ–ª–∫–∞ –∫–æ–º–∞–Ω–¥
{Fore.WHITE}4. –†–µ–¥–∏–∑–∞–π–Ω –º–µ–Ω—é –ø–æ–º–æ—â–∏
{Fore.WHITE}5. –ò–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–≥—Ä–∞—Ö
{Fore.RED}___\n
        """
        print(dynamic_border(path_text.strip(), Fore.CYAN)) 

    def display_help(self):
        help_text = f"""
{Fore.CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
{Fore.WHITE}           ---–ê–∫–∫–∞—É–Ω—Ç---\n
{Fore.GREEN}add    [–Ω–∏–∫]                {Fore.WHITE}- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{Fore.GREEN}login  [–Ω–∏–∫]                {Fore.WHITE}- –í—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{Fore.GREEN}all                         {Fore.WHITE}- –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
{Fore.GREEN}delete [–Ω–∏–∫]                {Fore.WHITE}- –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
{Fore.GREEN}show                        {Fore.WHITE}- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
{Fore.GREEN}exit -a                     {Fore.WHITE}- –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞\n
{Fore.WHITE}             ---–ò–≥—Ä—ã---\n
{Fore.RED}slots [—Å—É–º–º–∞]                 {Fore.WHITE}- –ò–≥—Ä–∞—Ç—å –≤ –∞–≤—Ç–æ–º–∞—Ç—ã
{Fore.RED}battle [—Å—É–º–º–∞]                {Fore.WHITE}- –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –º–æ–Ω—Å—Ç—Ä–æ–º
{Fore.RED}dice [—Å—É–º–º–∞]                  {Fore.WHITE}- –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
{Fore.RED}highlow [—Å—É–º–º–∞]               {Fore.WHITE}- –ò–≥—Ä–∞ High-Low\n
{Fore.WHITE}         ---–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞---\n
{Fore.BLUE}trade buy [–º–æ–Ω–µ—Ç–∞] [–∫–æ–ª-–≤–æ]  {Fore.WHITE}- –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É
{Fore.BLUE}trade sell [–º–æ–Ω–µ—Ç–∞] [–∫–æ–ª-–≤–æ] {Fore.WHITE}- –ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç—É
{Fore.BLUE}rates                        {Fore.WHITE}- –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞
{Fore.BLUE}wal                          {Fore.WHITE}- –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –≤—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞\n
{Fore.WHITE}       ---–ò–≥—Ä–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è---\n
{Fore.YELLOW}season                     {Fore.WHITE}- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≤–µ–Ω—Ç–∞—Ö
{Fore.YELLOW}promo [–∫–æ–¥]                {Fore.WHITE}- –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n
{Fore.WHITE}          ---–û–± Extract---\n
{Fore.CYAN}extract                      {Fore.WHITE}- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏
{Fore.CYAN}wnew                         {Fore.WHITE}- –ü–∞—Ç—á–Ω–æ—É—Ç\n
{Fore.WHITE}            ---–ü—Ä–æ—á–µ–µ---\n
{Fore.MAGENTA}exit                      {Fore.WHITE}- –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã
{Fore.MAGENTA}help                      {Fore.WHITE}- –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n
        """
        print(dynamic_border(help_text.strip(), Fore.CYAN))

    def display_version(self):
        print_art()
        version_info = f"""
{Fore.YELLOW}{ADDINFO}
{Fore.YELLOW}{VERSION_ALL}\n
{Fore.RED}{INFO}
{Fore.RED}–ê–≤—Ç–æ—Ä—ã: Rexamm1t, Wefol1x
{Fore.RED}Telegram: @rexamm1t, @wefolix\n
{Fore.GREEN}–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
        """
        print(dynamic_border(version_info.strip(), Fore.BLUE))

    def check_autosave(self):
        if time.time() - self.last_save > AUTOSAVE_INTERVAL:
            self.save_users()
            self.last_save = time.time()

def main():
    print_art()
    casino = Casino()
    casino.check_season_event()

    try:
        while True:
            casino.check_autosave()
            
            if casino.current_user:
                username = casino.current_user.username
                colors = [Fore.LIGHTBLUE_EX, Fore.LIGHTCYAN_EX, Fore.LIGHTMAGENTA_EX]
                username_gradient = gradient_text(username, colors)
                prompt = (
                    f"{Fore.BLUE}‚ï≠‚îÄ{username_gradient} - {VERSION}\n"
                    f"{Fore.BLUE}‚ï∞‚îÄ{gradient_text('‚û§', [Fore.GREEN, Fore.YELLOW])} {Style.RESET_ALL}"
                )
            else:
                prompt = f"{Fore.BLUE}‚ï≠‚îÄ{VERSION_ALL} - –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? - help\n‚ï∞‚îÄ‚û§ {Style.RESET_ALL}"

            try:
                action = input(prompt).strip()
                casino.last_command = action.split()[0] if action else ""

                if action.startswith("add "):
                    username = action.split(" ", 1)[1]
                    casino.create_user(username)

                elif action.startswith("login "):
                    username = action.split(" ", 1)[1]
                    casino.select_user(username)

                elif action.startswith("delete "):
                    username = action.split(" ", 1)[1]
                    casino.delete_user(username)

                elif action == "exit -a":
                    if casino.current_user:
                        casino.current_user.end_session()
                    casino.current_user = None
                    print(f"{Fore.GREEN}–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")

                elif action.startswith("slots"):
                    try:
                        bet = float(action.split()[1])
                        casino.slots(bet)
                    except:
                        print(f"{Fore.RED}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: slots [—Å—É–º–º–∞]")

                elif action.startswith("battle"):
                    try:
                        bet = float(action.split()[1])
                        casino.monster_battle(bet)
                    except:
                        print(f"{Fore.RED}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: battle [—Å—É–º–º–∞]")

                elif action.startswith("dice"):
                    try:
                        bet = float(action.split()[1])
                        casino.dice(bet)
                    except:
                        print(f"{Fore.RED}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dice [—Å—É–º–º–∞]"
                          )
                elif action.startswith("dice"):
                    try:
                        bet = float(action.split()[1])
                        casino.dice(bet)
                    except:
                        print(f"{Fore.RED}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: dice [—Å—É–º–º–∞]")

                elif action.startswith("highlow"):
                    try:
                        bet = float(action.split()[1])
                        casino.high_low(bet)
                    except:
                        print(f"{Fore.RED}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: highlow [—Å—É–º–º–∞]")

                elif action.startswith("trade"):
                    casino.trade(action[5:])

                elif action == "rates":
                    casino.show_rates()

                elif action == "show":
                    if casino.current_user:
                        casino.current_user.show_stats()
                    else:
                        print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –∞–∫–∫–∞—É–Ω—Ç.")

                elif action == "level":
                    if casino.current_user:
                        content = [
                            f"{Fore.CYAN}–£—Ä–æ–≤–µ–Ω—å: {casino.current_user.level}",
                            f"{Fore.BLUE}–û–ø—ã—Ç: {casino.current_user.xp:.0f}/{casino.current_user.required_xp():.0f}",
                            casino.current_user.show_level_progress(),
                            f"{Fore.GREEN}–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {casino.current_user.total_earned:.2f}{CURRENCY}"
                        ]
                        print(dynamic_border('\n'.join(content), Fore.YELLOW))
                    else:
                        print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω!")

                elif action == "season":
                    casino.check_season_event()

                elif action == "wal":
                    if casino.current_user:
                        casino.current_user.crywall()
                    else:
                        print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω!")

                elif action == "extract":
                    casino.display_version()

                elif action == "wnew":
                    casino.newnote_up()

                elif action == "help":
                    casino.display_help()

                elif action.startswith("promo "):
                    code = action.split(" ", 1)[1].strip()
                    casino.activate_promo(code)

                elif action == "all":
                    casino.show_all_profiles()

                elif action == "exit":
                    if casino.current_user:
                        casino.current_user.end_session()
                    casino.save_users()
                    print(gradient_text("\n–î–æ –≤—Å—Ç—Ä–µ—á–∏! –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n", [Fore.GREEN, Fore.BLUE]))
                    break
                
                else:
                    print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–º–æ—â–∏")

            except (IndexError, ValueError) as e:
                print(f"{Fore.RED}–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")
            except Exception as e:
                print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

    except KeyboardInterrupt:
        print(f"{Fore.RED}\n–°—Ä–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
        if casino.current_user:
            casino.current_user.end_session()
        casino.save_users()
        exit()

if __name__ == "__main__":
    if not os.path.exists('/etc'):
        os.makedirs('/etc', exist_ok=True)
    main()
