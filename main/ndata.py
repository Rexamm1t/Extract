import socket
import threading
import json
import random
import time
from datetime import datetime, timedelta
from colorama import Fore, Style, init
import os
import textwrap

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ data.py
CRYPTO_SYMBOLS = {
    "EXTRACT": "‚í∫",
    "BETASTD": "Œ≤",
    "EXRSD": "ƒí",
    "DOGCOIN": "DC",
    "BTC": "‚Çø",
    "ETH": "Œû",
    "LTC": "≈Å",
    "BNB": "Íûç",
    "ADA": "ùî∏",
    "SOL": "S",
    "XRP": "‚úï",
    "DOT": "‚óè",
    "DOGE": "√ê",
    "SHIB": "SH",
    "AVAX": "AV",
    "TRX": "T",
    "MATIC": "M",
    "ATOM": "A",
    "NOT": "‚ñ≤",
    "TON": "‚ñº",
    "XYZ": "≈∏",
    "ABC": "‚ú¶",
    "DEF": "DT",
    "GHI": "ƒû",
    "JKL": "+",
    "MNO": "·∏æ",
    "PQR": "‚ùñ"
}
CURRENCY = "‚í∫"
SAVE_PATH = "data/users.json"
VERSION = "EXTRACT P2P 1.0"

def dynamic_border(text, border_color=Fore.MAGENTA, width=None):
    lines = text.split('\n')
    max_width = width if width else max(len(line) for line in lines) + 4
    border = '‚ïê' * (max_width - 2)
    bordered = [f"{border_color}‚ïî{border}‚ïó"]
    for line in lines:
        bordered.append(f"{border_color}‚ïë {line.ljust(max_width - 4)} ‚ïë")
    bordered.append(f"{border_color}‚ïö{border}‚ïù")
    return '\n'.join(bordered)

class User:
    def __init__(self, username):
        self.username = username
        self.crypto_balance = {coin: 0.0 for coin in CRYPTO_SYMBOLS}
        self.crypto_balance["EXTRACT"] = 10000.0  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        self.transactions = []
        self.last_login = datetime.now().strftime("%Y-%m-%d")

    def to_dict(self):
        return {
            "username": self.username,
            "crypto_balance": self.crypto_balance,
            "transactions": self.transactions,
            "last_login": self.last_login
        }

    @classmethod
    def from_dict(cls, data):
        user = cls(data["username"])
        user.crypto_balance = data.get("crypto_balance", {coin: 0.0 for coin in CRYPTO_SYMBOLS})
        user.transactions = data.get("transactions", [])
        user.last_login = data.get("last_login", datetime.now().strftime("%Y-%m-%d"))
        return user

    def add_transaction(self, action, coin, amount, total):
        self.transactions.insert(0, {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "action": action,
            "coin": coin,
            "amount": amount,
            "total": total
        })
        self.transactions = self.transactions[:10]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10

    def show_stats(self):
        content = [
            f"{Fore.CYAN}‚ïî{'‚ïê'*25}‚ï¶{'‚ïê'*15}‚ïó",
            f"‚ïë {'Username:'.ljust(24)} ‚ïë {self.username.ljust(14)} ‚ïë",
            f"‚ï†{'‚ïê'*25}‚ï¨{'‚ïê'*15}‚ï£"
        ]
        
        # –ë–∞–ª–∞–Ω—Å—ã
        for coin, amount in self.crypto_balance.items():
            if amount > 0:
                content.append(f"‚ïë {coin.ljust(10)} {CRYPTO_SYMBOLS.get(coin, '?')} ‚ïë {amount:>12.4f} ‚ïë")
        
        content.append(f"‚ïö{'‚ïê'*25}‚ï©{'‚ïê'*15}‚ïù")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if self.transactions:
            content.append(f"\n{Fore.YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:")
            for t in self.transactions[:3]:
                action = "–ö—É–ø–ª–µ–Ω–æ" if t['action'] == 'buy' else "–ü—Ä–æ–¥–∞–Ω–æ"
                content.append(f"{t['timestamp'][11:16]} {action} {t['amount']:.4f} {t['coin']} –∑–∞ {t['total']:.2f}{CURRENCY}")
        
        print('\n'.join(content))

class P2PCasino:
    def __init__(self):
        self.users = {}
        self.current_user = None
        self.peers = {}
        self.connections = {}
        self.server_socket = None
        self.running = False
        self.peer_id = self._generate_peer_id()
        self.load_users()

    def _generate_peer_id(self):
        return f"peer_{datetime.now().strftime('%Y%m%d%H%M%S')}_{random.randint(1000,9999)}"

    def load_users(self):
        try:
            os.makedirs(os.path.dirname(SAVE_PATH), exist_ok=True)
            if os.path.exists(SAVE_PATH):
                with open(SAVE_PATH, "r") as f:
                    data = json.load(f)
                    self.users = {un: User.from_dict(user_data) for un, user_data in data.items()}
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    def save_users(self):
        try:
            with open(SAVE_PATH, "w") as f:
                data = {un: user.to_dict() for un, user in self.users.items()}
                json.dump(data, f, indent=4)
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

    def start_server(self, port=5555):
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind(('0.0.0.0', port))
        self.server_socket.listen(5)
        self.running = True
        print(f"{Fore.GREEN}P2P —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        
        accept_thread = threading.Thread(target=self._accept_connections)
        accept_thread.start()

    def _accept_connections(self):
        while self.running:
            try:
                conn, addr = self.server_socket.accept()
                peer_thread = threading.Thread(target=self._handle_peer, args=(conn, addr))
                peer_thread.start()
            except Exception as e:
                if self.running:
                    print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")

    def _handle_peer(self, conn, addr):
        peer_id = None
        try:
            data = conn.recv(4096).decode()
            if not data:
                return
                
            message = json.loads(data)
            if message.get('type') == 'handshake':
                peer_id = message['peer_id']
                self.peers[peer_id] = (addr[0], addr[1])
                self.connections[peer_id] = conn
                print(f"{Fore.CYAN}–ü–æ–¥–∫–ª—é—á–µ–Ω –ø–∏—Ä: {peer_id} ({addr[0]}:{addr[1]})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                conn.send(json.dumps({
                    'type': 'handshake_ack',
                    'peer_id': self.peer_id,
                    'status': 'success'
                }).encode())
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                while self.running:
                    data = conn.recv(4096)
                    if not data:
                        break
                    self._process_message(peer_id, json.loads(data.decode()))
                    
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å –ø–∏—Ä–æ–º: {str(e)}")
        finally:
            if peer_id in self.connections:
                del self.connections[peer_id]
            conn.close()

    def _process_message(self, peer_id, message):
        msg_type = message.get('type')
        
        if msg_type == 'transfer':
            self._process_transfer(peer_id, message)
        elif msg_type == 'game_result':
            self._process_game_result(message)

    def _process_transfer(self, peer_id, message):
        if not self.current_user:
            return
            
        currency = message['currency'].upper()
        amount = float(message['amount'])
        
        if currency not in CRYPTO_SYMBOLS:
            return
            
        self.current_user.crypto_balance[currency] += amount
        self.current_user.add_transaction('transfer', currency, amount, amount)
        print(f"{Fore.GREEN}–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: {amount:.4f}{CRYPTO_SYMBOLS[currency]} –æ—Ç {peer_id}")

    def connect_to_peer(self, ip, port):
        try:
            conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            conn.connect((ip, port))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º handshake
            conn.send(json.dumps({
                'type': 'handshake',
                'peer_id': self.peer_id,
                'version': VERSION
            }).encode())
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            data = conn.recv(4096).decode()
            response = json.loads(data)
            
            if response.get('status') == 'success':
                peer_id = response['peer_id']
                self.peers[peer_id] = (ip, port)
                self.connections[peer_id] = conn
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                peer_thread = threading.Thread(target=self._handle_peer, args=(conn, (ip, port)))
                peer_thread.start()
                
                print(f"{Fore.GREEN}–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {peer_id}")
                return True
                
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
            return False

    def send_transfer(self, peer_id, amount, currency):
        if not self.current_user or currency not in self.current_user.crypto_balance:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return False
            
        if self.current_user.crypto_balance[currency] < amount:
            print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
            return False
            
        if peer_id not in self.connections:
            print(f"{Fore.RED}–ü–∏—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
            
        try:
            self.current_user.crypto_balance[currency] -= amount
            self.current_user.add_transaction('transfer', currency, -amount, amount)
            
            message = {
                'type': 'transfer',
                'from': self.peer_id,
                'currency': currency,
                'amount': amount,
                'timestamp': datetime.now().isoformat()
            }
            
            self.connections[peer_id].send(json.dumps(message).encode())
            print(f"{Fore.GREEN}–ü–µ—Ä–µ–≤–æ–¥ {amount:.4f}{CRYPTO_SYMBOLS[currency]} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫ {peer_id}")
            return True
            
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")
            return False

    def create_user(self, username):
        if username in self.users:
            print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
            
        self.users[username] = User(username)
        self.save_users()
        print(f"{Fore.GREEN}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å–æ–∑–¥–∞–Ω")
        return True

    def login(self, username):
        if username in self.users:
            self.current_user = self.users[username]
            print(f"{Fore.GREEN}–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {username}")
            return True
        print(f"{Fore.RED}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    def slots(self, bet):
        if not self.current_user:
            print(f"{Fore.RED}–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            return
            
        try:
            bet = float(bet)
            if bet <= 0:
                print(f"{Fore.RED}–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return
                
            if self.current_user.crypto_balance['EXTRACT'] < bet:
                print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
                
            self.current_user.crypto_balance['EXTRACT'] -= bet
            
            symbols = ["üçí", "üçä", "üçã", "üîî", "‚≠ê", "üíé"]
            results = [random.choice(symbols) for _ in range(3)]
            
            print(f"\n{' | '.join(results)}\n")
            
            # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–∏–≥—Ä—ã—à–∞
            if results[0] == results[1] == results[2]:
                win = bet * 10
                print(f"{Fore.GREEN}–î–ñ–ï–ö–ü–û–¢! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win}{CURRENCY}")
            elif results[0] == results[1] or results[1] == results[2]:
                win = bet * 3
                print(f"{Fore.YELLOW}–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win}{CURRENCY}")
            else:
                win = 0
                print(f"{Fore.RED}–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏")
                
            self.current_user.crypto_balance['EXTRACT'] += win
            self.current_user.add_transaction('slots', 'EXTRACT', win - bet, bet)
            self.save_users()
            
        except ValueError:
            print(f"{Fore.RED}–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")

    def dice(self, bet):
        if not self.current_user:
            print(f"{Fore.RED}–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
            return
            
        try:
            bet = float(bet)
            if bet <= 0:
                print(f"{Fore.RED}–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
                return
                
            if self.current_user.crypto_balance['EXTRACT'] < bet:
                print(f"{Fore.RED}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
                return
                
            self.current_user.crypto_balance['EXTRACT'] -= bet
            
            player_roll = sum(random.randint(1, 6) for _ in range(3))
            dealer_roll = sum(random.randint(1, 6) for _ in range(3))
            
            print(f"{Fore.CYAN}–í–∞—à–∏ –∫–æ—Å—Ç–∏: {player_roll}")
            print(f"{Fore.RED}–ö–æ—Å—Ç–∏ –¥–∏–ª–µ—Ä–∞: {dealer_roll}")
            
            if player_roll > dealer_roll:
                win = bet * 2
                print(f"{Fore.GREEN}–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win}{CURRENCY}")
                self.current_user.crypto_balance['EXTRACT'] += win
            else:
                win = -bet
                print(f"{Fore.RED}–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏")
                
            self.current_user.add_transaction('dice', 'EXTRACT', win, bet)
            self.save_users()
            
        except ValueError:
            print(f"{Fore.RED}–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")

    def show_version(self):
        print(dynamic_border(
            f"{Fore.CYAN}EXTRACT P2P –í–µ—Ä—Å–∏—è {VERSION}\n"
            f"–î–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–∞–∑–∏–Ω–æ-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞: @extract_support",
            Fore.BLUE
        ))

    def show_updates(self):
        print(dynamic_border(
            f"{Fore.YELLOW}–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
            f"- –î–æ–±–∞–≤–ª–µ–Ω–∞ P2P —Å–µ—Ç—å\n"
            f"- –ù–æ–≤—ã–µ –∏–≥—Ä—ã: –°–ª–æ—Ç—ã –∏ –ö–æ—Å—Ç–∏\n"
            f"- –£–ª—É—á—à–µ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
            Fore.YELLOW
        ))

    def stop_server(self):
        self.running = False
        if self.server_socket:
            self.server_socket.close()
        for conn in self.connections.values():
            conn.close()
        self.save_users()
        print(f"{Fore.YELLOW}–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    casino = P2PCasino()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    server_thread = threading.Thread(target=casino.start_server)
    server_thread.daemon = True
    server_thread.start()
    
    print(dynamic_border(
        f"{Fore.CYAN}–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EXTRACT P2P!\n"
        f"–í–∞—à Peer ID: {casino.peer_id}\n"
        f"–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥",
        Fore.MAGENTA
    ))
    
    try:
        while True:
            cmd = input(f"{Fore.BLUE}P2P> {Style.RESET_ALL}").strip().split()
            if not cmd:
                continue
                
            if cmd[0] == 'help':
                print(dynamic_border(
                    f"{Fore.CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    f"{Fore.GREEN}help        {Fore.WHITE}- –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                    f"{Fore.GREEN}create [–Ω–∏–∫]{Fore.WHITE}- –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    f"{Fore.GREEN}login [–Ω–∏–∫] {Fore.WHITE}- –í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
                    f"{Fore.GREEN}show        {Fore.WHITE}- –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
                    f"{Fore.GREEN}connect [ip] [port] {Fore.WHITE}- –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–∏—Ä—É\n"
                    f"{Fore.GREEN}transfer [peer_id] [amount] [currency] {Fore.WHITE}- –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
                    f"{Fore.GREEN}slots [—Å—Ç–∞–≤–∫–∞] {Fore.WHITE}- –ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã\n"
                    f"{Fore.GREEN}dice [—Å—Ç–∞–≤–∫–∞] {Fore.WHITE}- –ò–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏\n"
                    f"{Fore.GREEN}extract     {Fore.WHITE}- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏\n"
                    f"{Fore.GREEN}wnew        {Fore.WHITE}- –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                    f"{Fore.GREEN}exit        {Fore.WHITE}- –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                    Fore.CYAN
                ))
                
            elif cmd[0] == 'create' and len(cmd) > 1:
                casino.create_user(cmd[1])
                
            elif cmd[0] == 'login' and len(cmd) > 1:
                casino.login(cmd[1])
                
            elif cmd[0] == 'show':
                if casino.current_user:
                    casino.current_user.show_stats()
                else:
                    print(f"{Fore.RED}–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                    
            elif cmd[0] == 'connect' and len(cmd) > 2:
                casino.connect_to_peer(cmd[1], int(cmd[2]))
                
            elif cmd[0] == 'transfer' and len(cmd) > 3:
                casino.send_transfer(cmd[1], float(cmd[2]), cmd[3].upper())
                
            elif cmd[0] == 'slots' and len(cmd) > 1:
                casino.slots(cmd[1])
                
            elif cmd[0] == 'dice' and len(cmd) > 1:
                casino.dice(cmd[1])
                
            elif cmd[0] == 'extract':
                casino.show_version()
                
            elif cmd[0] == 'wnew':
                casino.show_updates()
                
            elif cmd[0] == 'exit':
                casino.stop_server()
                break
                
            else:
                print(f"{Fore.RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                
    except KeyboardInterrupt:
        casino.stop_server()
        print(f"\n{Fore.YELLOW}–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

if __name__ == "__main__":
    main()